@page "/MyNotes"
@using NotesLearningApplication.Shared.DTO

@inject HttpClient Http

<PageTitle>Notes</PageTitle>
@if (AlertSuccess != null) {
    <div class="alert alert-dismissible alert-success">
        <button type="button" class="btn-close" @onclick=DismissAllAlerts></button>
        <p> @AlertSuccess</p>
    </div>
}
@if (AlertError != null) {
    <div class="alert alert-dismissible alert-danger">
        <button type="button" class="btn-close" @onclick=DismissAllAlerts></button>
        <p> @AlertError</p>
    </div>
}

<h1>Notes page.</h1>

<AuthorizeView>
    <Authorized>
        <button class="m-3 btn btn-primary" @onclick=OpenModalForNew>Add new Note</button>
    </Authorized>
</AuthorizeView>
<AuthorizeView>
    <Authorized>
        @if (ShowLoadingSpinner) {
            <p> <div class="spinner-border text-primary" role="status" /></p>
        } else {
            <div class="row row-cols-1 row-cols-md-3 g-4">
                @foreach (var note in Notes) {
                    <div class="col">
                        <div class="card h-100 border-primary">
                             @if(!(note.Category==null)){
                                    <div class="card-header p-3">@note.Category?.Name</div>
                                }
                            <div class="card-body p-3">
                                <h5 class="card-title">@note.Title</h5>
                                <p class="card-text">@note.Description</p>
                            </div>
                            <div class="card-footer"><span>Created: @note.CreatedAt</span> <button class="btn  btn-primary float-end " @onclick="_=>OpenModalForEdit(note.Id)">Edit</button></div>
                        </div>
                    </div>
                }
            </div>
        }
    </Authorized>
    <NotAuthorized>
        <div>You need to login in order to add/edit/remove your notes</div>
    </NotAuthorized>
</AuthorizeView>

@if (ModalNote != null) {
    <div class="modal fade show" id="myModal" style="display:block; background-color: rgba(10,10,10,.8);" aria-modal="true" role="dialog">
        <div class="modal-dialog">
            <div class="modal-content">

                <div class="modal-header">
                    @if (IsModalEdit) {
                        <h5 class="modal-title">Edit category</h5>
                    } else {
                        <h5 class="modal-title">Add new category</h5>
                    }
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close" @onclick=CloseModal></button>
                </div>

                <div class="modal-body">
                    <EditForm Model="@ModalNote" @ref=ModalDialogForm>
                        <DataAnnotationsValidator />
                        <div class="form-group">
                            <label>Title</label>
                            <div>
                                <InputText style="width: 80%" id="Name" @bind-Value="ModalNote.Title"  />
                                <ValidationMessage For="()=>ModalNote.Title">Title is required and must be non-empty</ValidationMessage>
                            </div>
                        </div>
                        <div class="form-group">
                            <label>Description</label>
                            <div>
                                <InputText style="width: 80%" id="Description" @bind-Value="ModalNote.Description" />
                            </div>
                        </div>
                        <div class="form-group">
                            <label>Description</label>
                            <div>
                                <InputSelect style="width: 80%" id="Description" @bind-Value="ModalNote.CategoryId" DisplayName="Displat" >
                                    <option disabled selected value style="display:none">Select category...</option>
                                    @foreach (var category in AllCategories) {
                                        <option value="@category.Id">@category.Name</option>
                                    }
                            </InputSelect>
                            <ValidationMessage For="()=>ModalNote.CategoryId">Category fiels id required</ValidationMessage>
                        </div>
                    </div>
                </EditForm>
            </div>

            <div class="modal-footer">
                @if (IsModalEdit) {
                        <button type="button" class="btn btn-primary" @onclick=EditCategorySubmit disabled=@SaveButtonDisabled>Save</button>
                        <button type="button" class="btn btn-danger" @onclick=RemoveCategorySubmit disabled=@SaveButtonDisabled>Remove</button>
                    } else {
                        <button type="button" class="btn btn-success" @onclick=AddCategorySubmit disabled=@AddButtonDisabled>Add</button>
                    }
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal" @onclick=CloseModal>Cancel</button>

                </div>


            </div>
        </div>
    </div>
}






@code {
    [CascadingParameter]
    private Task<AuthenticationState> authenticationStateTask { get; set; }

    private List<NoteDTO> Notes = new();
    public bool ShowLoadingSpinner { get; set; } = true;

    protected async override Task OnInitializedAsync() {
        try {
            var user = (await authenticationStateTask).User;
            if (user.Identity.IsAuthenticated) {
                Notes = await Http.GetFromJsonAsync<List<NoteDTO>>($"api/notes/user/{user.Claims.First(c => c.Type == "UserId").Value}") ?? new();
                AllCategories = await Http.GetFromJsonAsync<List<CategoryDTO>>("api/category") ?? new();
            }
        } catch (Exception e) {
            
        } finally {
            ShowLoadingSpinner = false;
        }

        StateHasChanged();
    }

    EditForm ModalDialogForm;
    private List<CategoryDTO> AllCategories = new();
    private NoteDTO? ModalNote;
    private bool IsModalEdit;
    private string? AlertSuccess;
    private string? AlertError;

    private bool AddButtonDisabled = false;
    private bool SaveButtonDisabled = false;

    private void CloseModal() {
        ModalNote = null;
    }

    private void OpenModalForEdit(int noteId) {
        var noteToEdit = Notes.First(c => c.Id == noteId);
        ModalNote = noteToEdit.ShallowCopy();
        IsModalEdit = true;
    }
    private void OpenModalForNew() {
        ModalNote = new NoteDTO();
        IsModalEdit = false;

    }

    private async void AddCategorySubmit() {
        if (ModalDialogForm.EditContext.Validate()) {
            AddButtonDisabled = true;
            DismissAllAlerts();
            var res = await Http.PostAsJsonAsync<NoteDTO>("api/notes/new", ModalNote);
            if (res.IsSuccessStatusCode) {
                AlertSuccess = "Sucessfully added note";
            } else {
                AlertError = "Error when adding note: " + (int)res.StatusCode + " " + res.ReasonPhrase;
            }
            AddButtonDisabled = false;
            CloseModal();
            StateHasChanged();
            await OnInitializedAsync();
            StateHasChanged();
        }
    }
    private async void EditCategorySubmit() {
        if (ModalDialogForm.EditContext.Validate()) {
            SaveButtonDisabled = true;
            DismissAllAlerts();
            var res = await Http.PutAsJsonAsync<NoteDTO>("api/notes/edit", ModalNote);
            if (res.IsSuccessStatusCode) {
                AlertSuccess = "Sucessfully edited note " + ModalNote.Title;
            } else {
                AlertError = "Error when editing note: " + (int)res.StatusCode + " " + res.ReasonPhrase;
            }
            CloseModal();
            SaveButtonDisabled = false;
            StateHasChanged();
            await OnInitializedAsync();
            StateHasChanged();
        }
    }

    private async void RemoveCategorySubmit() {

        SaveButtonDisabled = true;
        DismissAllAlerts();
        var res = await Http.DeleteAsync("api/notes/" + ModalNote.Id);
        if (res.IsSuccessStatusCode) {
            AlertSuccess = "Sucessfully removed note " + ModalNote.Title;
        } else {
            AlertError = "Error when removed note: " + (int)res.StatusCode + " | " + res.ReasonPhrase;
        }
        CloseModal();
        SaveButtonDisabled = false;
        StateHasChanged();
        await OnInitializedAsync();
        StateHasChanged();
    }

    private void DismissAllAlerts() {
        AlertError = null;
        AlertSuccess = null;
    }

}